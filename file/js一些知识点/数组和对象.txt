array.push(元素) 把元素插入到array的末尾

array.unshift(元素) 把元素插入到array的开头

array.pop(元素) 把元素从Array的末尾移除

array.shift(元素) 把元素从Array的开头移除

array.splice(x,y,z) 可以让我们从数组中的任意位置连续删除
或者替换任意数量的元素。
x:从这个位置开始移除
y:从x位置开始，移除多少个
z [此参数在移除时可不填] :将移除掉的地方替换成z

array.slice(x,y) 不会修改数组，而是会复制，或者说提取
给定数量的元素到一个新数组。
x:开始提取的位置
y:结束提取的位置[注意:不会提取y位置的元素]

... 是展开运算符 我们可以用展开运算符来复制数组
array=[11,1]
a_array=[...array]
现在他们两个相等

array.indexOf() 检测元素是否在数组中
是返回 元素的位置(索引)
否返回 -1

我们可以用for循环遍历数组
b=[1,2];
c=[1,3];
function a(){
    let newa=[];
    for (i=0,i<b.length,i++){
        if(b[i].indexOf(c)=-1){
            newa.push(b[i]);
        };
    };
};

对象（object）本质上是键值对（key-value pair）的集合。
或者说，一系列被映射到唯一标识符的数据就是对象；
习惯上，唯一标识符叫做属性（property）或者键（key）；
数据叫做值（value）。

const eee ={
    aaa='ggh';
    (键)=(值)
};


给对象添加属性,有2种

eee.ddd = 'wer' 点括号添加
eee['jjj bbb,uoo']=33; 方括号添加
注意：如果要添加的属性有空格或者其他字符 必须用方括号


在对象中，我们也可以嵌套任意层数的对象，
对象的属性值可以是 JavaScript 支持的任意类型，
包括数组和其他对象

我们可以这样访问对象的数据
a.b.c.d.e.f.g=0


delete 可以删除对象属性
delete eee.ddd

想知道对象是否包含某些属性 有2种

users.hasOwnProperty('Alan');
'Alan' in users;

检查 'Alan' 是否在users 里面

用 for ... in 遍历对象


我们可以给 Object.keys() 方法传入一个对象作为参数，
来生成包含对象所有属性的数组。
需要注意的是，数组中元素的顺序是不确定的。

Object.keys(eee)

在对象中，我们可以添加方法(函数)
const eee = {
    name:'dog'
    sayname:function() {return 'my name is ' + eee.name}
}
可以这样调用
eee.sayname()

this 可以提高对象的可读性和复用性 如
const eee ={
    name:'cat'
    sayname:function() {return 'my name is' +this.name}
}
这样一来this就是指包含这个函数的对象的name，如果我们
把name变成dog，也不用修改，他会自动改

构造函数是创建对象的函数。 函数给这个新对象定义属性和行为
function Bird() {
  this.name = "Albert";
  this.color = "blue";
  this.numLegs = 2;
}
构造函数内的 this 总是指被创建的对象

构造函数函数名的首字母大写，这是为了区分构造函数
和其他非构造函数。构造函数使用 this 关键字来给它将创建的
这个对象设置新的属性。this 指向的就是它新创建的这个对象。
构造函数定义了属性行为就可创建对象，而不需要设置返回值。

通过构造函数创建对象的时候要使用 new 操作符
let blueBird = new Bird();

你可以给你的 Bird 设置为可以接收参数的构造函数
function Bird(name, color) {
  this.name = name;
  this.color = color;
  this.numLegs = 2;
}

instanceof 允许你将对象与构造函数之间进行比较，
根据对象是否由这个构造函数创建的返回 true 或者 false
let crow = new Bird("Alexis", "black");
crow instanceof Bird;
返回true

prototype 是一个可以在所有 Bird 实例之间共享的对象。
Bird.prototype.numLegs = 2;
现在所有的 Bird 实例都拥有了共同的 numLegs 属性值。

for (let a in duck) {
  if(duck.hasOwnProperty(a)) {
    ownProps.push(a);
  } else {
    prototypeProps.push(b);
  }
}
这将把自身属性给A
原生属性(prototype) 给b

